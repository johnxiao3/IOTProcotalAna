package com.TCPCapture;

import java.io.FileNotFoundException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.jnetpcap.Pcap;
import org.jnetpcap.PcapIf;
import org.jnetpcap.nio.JBuffer;
import org.jnetpcap.packet.PcapPacket;
import org.jnetpcap.packet.PcapPacketHandler;
import org.jnetpcap.protocol.lan.Ethernet;
import org.jnetpcap.protocol.tcpip.Tcp;

//for finding Device classing Example...   
/*
 * Here is the output generated by this example :  
 *   
 *  Network devices found:  
 *  #0: \Device\NPF_{BC81C4FC-242F-4F1C-9DAD-EA9523CC992D} [Intel(R) PRO/100 VE]   
 *  #1: \Device\NPF_{E048DA7F-D007-4EEF-909D-4238F6344971} [VMware Virtual Ethernet Adapter]  
 *  #2: \Device\NPF_{5B62B373-3EC1-460D-8C71-54AA0BF761C7} [VMware Virtual Ethernet Adapter]  
 *  #3: \Device\NPF_GenericDialupAdapter [Adapter for generic dialup and VPN capture]  
 *   
 *  Choosing 'Intel(R) PRO/100 VE) ' on your behalf:  
 *  Received packet at Tue Nov 03 18:52:42 EST 2009 caplen=1362 len=1362 jNetPcap rocks!  
 *  Received packet at Tue Nov 03 18:52:45 EST 2009 caplen=82   len=82   jNetPcap rocks!  
 *  Received packet at Tue Nov 03 18:52:45 EST 2009 caplen=145  len=145  jNetPcap rocks!  
 *  Received packet at Tue Nov 03 18:52:45 EST 2009 caplen=62   len=62   jNetPcap rocks!  
 *  Received packet at Tue Nov 03 18:52:45 EST 2009 caplen=164  len=164  jNetPcap rocks!  
 *  Received packet at Tue Nov 03 18:52:45 EST 2009 caplen=62   len=62   jNetPcap rocks!  
 *  Received packet at Tue Nov 03 18:52:45 EST 2009 caplen=54   len=54   jNetPcap rocks!  
 *  Received packet at Tue Nov 03 18:52:45 EST 2009 caplen=1073 len=1073 jNetPcap rocks!  
 *  Received packet at Tue Nov 03 18:52:45 EST 2009 caplen=1514 len=1514 jNetPcap rocks!  
 *  Received packet at Tue Nov 03 18:52:45 EST 2009 caplen=279  len=279  jNetPcap rocks!  
 */
public class TCPCapture {
	public static void main(String[] args) throws FileNotFoundException {
		List<PcapIf> alldevs = new ArrayList<PcapIf>();
		StringBuilder errbuf = new StringBuilder();

		int r = Pcap.findAllDevs(alldevs, errbuf);
		if (r == Pcap.NOT_OK || alldevs.isEmpty()) {
			System.out.printf("Can't read list of devices, error is %s", errbuf.toString());
			return;
		}

		System.out.println("Network devices found:");

		int i = 0;

		for (PcapIf device : alldevs) {
			String description = (device.getDescription() != null) ? device.getDescription()
					: "No description available";
			System.out.printf("#%d: %s [%s]\n", i++, device.getName(), description);
		}
		PcapIf device1 = alldevs.get(0);
		int snaplen = 64 * 1024; // Capture all packets, no trucation  
		int flags = Pcap.MODE_PROMISCUOUS; // capture all packets  
		int timeout = 10 * 1000; // 10 seconds in millis  
		Pcap pcap = Pcap.openLive(device1.getName(), snaplen, flags, timeout, errbuf);

		if (pcap == null) {
			System.err.printf("Error while opening device for capture: " + errbuf.toString());
			return;
		}
		PrintWriter out = new PrintWriter("E:\\abc.txt");
		PcapPacketHandler<String> jpacketHandler = new PcapPacketHandler<String>() {
			public void nextPacket(PcapPacket packet, String user) {
				System.out.printf("Received packet at %s caplen=%-4d len=%-4d %s\n",
						new Date(packet.getCaptureHeader().timestampInMillis()), packet.getCaptureHeader().caplen(),
						packet.getCaptureHeader().wirelen(), user);
				out.write("Received packet at" + packet.getCaptureHeader().timestampInMillis() + "caplen");
				//%s caplen=%-4d len=%-4d %s\n",
				//		new Date(packet.getCaptureHeader().timestampInMillis()), packet.getCaptureHeader().caplen(),
				//		packet.getCaptureHeader().wirelen());
				//System.out.print(packet.getUTF8Char(0));

				//PcapHeader header = null;
				//packet.getCaptureHeader().peerTo(header, 0);
				packet.scan(Ethernet.ID);

				Tcp tcp = new Tcp();
				if (packet.hasHeader(tcp)) {

					System.out.print("tcp.dst_port:" + tcp.destination());
					System.out.print("  tcp.src_port:+" + tcp.source());
					System.out.print("  tcp.ack:" + tcp.ack() + "\n");
					out.write("tcp.dst_port:" + tcp.destination());
					out.write("  tcp.src_port:+" + tcp.source());
					out.write("  tcp.ack:" + tcp.ack() + "\n");

					if (tcp.destination() == 1883 || tcp.source() == 1883)
						System.out.print(packet + "\n");

					int size = packet.size();
					JBuffer buffer = packet;

					/*	for (int i = 0; i < size; i++) {
							System.out.print(Integer.toHexString(buffer.getUByte(i)) + " ");
							out.write(Integer.toHexString(buffer.getUByte(i)) + " ");
						}*/
					System.out.print("\n\n");

					out.write("\n\n");
				}
			}
		};
		out.close();
		pcap.loop(100, jpacketHandler, "jNetPcap rocks!");
		pcap.close();
		System.out.print("end\n");
	}
}
